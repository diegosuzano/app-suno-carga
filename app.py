import streamlit as st
import pandas as pd
from datetime import datetime, timezone, timedelta
import numpy as np
import gspread
from google.oauth2.service_account import Credentials

# --- CONFIGURA√á√ïES GERAIS ---
NOME_PLANILHA = "Controle de Carga Suzano"
FUSO_HORARIO = timezone(timedelta(hours=-3))

campos_tempo = [
    "Entrada na F√°brica", "Encostou na doca F√°brica", "In√≠cio carregamento",
    "Fim carregamento", "Faturado", "Amarra√ß√£o carga", "Sa√≠da do p√°tio",
    "Entrada CD", "Encostou na doca CD", "In√≠cio Descarregamento CD",
    "Fim Descarregamento CD", "Sa√≠da CD"
]
campos_calculados = [
    "Tempo Espera Doca", "Tempo de Carregamento", "Tempo Total",
    "Tempo Percurso Para CD", "Tempo Espera Doca CD", "Tempo de Descarregamento CD", "Tempo Total CD"
]
COLUNAS_ESPERADAS = ["Data", "Placa do caminh√£o", "Nome do conferente"] + campos_tempo + campos_calculados

# --- INICIALIZA√á√ÉO DO ESTADO DA SESS√ÉO ---
if 'pagina_atual' not in st.session_state:
    st.session_state.pagina_atual = "Tela Inicial"

# --- CONFIGURA√á√ÉO DA P√ÅGINA E CSS ---
st.set_page_config(
    page_title="Suzano - Controle de Carga",
    layout="wide",
    initial_sidebar_state="collapsed"
)
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #1f4e79;
        font-size: 28px;
        font-weight: bold;
        margin-bottom: 30px;
        padding: 20px;
        background: linear-gradient(90deg, #e8f4f8 0%, #f0f8ff 100%);
        border-radius: 10px;
        border-left: 5px solid #1f4e79;
    }
    .section-header {
        color: #1f4e79;
        font-size: 22px;
        font-weight: bold;
        margin: 25px 0 15px 0;
        padding-bottom: 5px;
        border-bottom: 2px solid #e0e0e0;
    }
    .stMetric {
        background-color: #FFFFFF;
        border: 1px solid #E0E0E0;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .stButton {
        margin-bottom: 5px;
    }
</style>
""", unsafe_allow_html=True)

# --- FUN√á√ïES DE CONEX√ÉO E DADOS ---
@st.cache_resource(show_spinner="Conectando ao Google Sheets...")
def connect_to_google_sheets():
    try:
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive"
        ]
        creds = Credentials.from_service_account_info(
            st.secrets["gcp_service_account"],
            scopes=scopes
          )
        client = gspread.authorize(creds)
        spreadsheet = client.open(NOME_PLANILHA)
        return spreadsheet.sheet1
    except Exception as e:
        st.error(f"Erro de conex√£o com o Google Sheets: {e}. Verifique suas credenciais, o nome da planilha e se voc√™ a compartilhou com o e-mail do rob√¥.")
        return None

@st.cache_data(ttl=30, show_spinner="Carregando dados...")
def carregar_dataframe(_worksheet):
    if _worksheet is None: return pd.DataFrame(columns=COLUNAS_ESPERADAS)
    try:
        data = _worksheet.get_all_values()
        if len(data) < 2:
            return pd.DataFrame(columns=COLUNAS_ESPERADAS)

        df = pd.DataFrame(data[1:], columns=data[0]).astype(str)
        for col in COLUNAS_ESPERADAS:
            if col not in df.columns: df[col] = ''

        df = df[COLUNAS_ESPERADAS]
        # <<< CORRE√á√ÉO 1: Manter a data como string, sem converter para objeto date.
        # A linha abaixo foi removida:
        # df['Data'] = pd.to_datetime(df['Data'], errors='coerce').dt.date
        df['df_index'] = df.index
        return df.fillna('')
    except Exception as e:
        st.error(f"Erro ao ler dados da planilha: {e}")
        return pd.DataFrame(columns=COLUNAS_ESPERADAS)

# --- FUN√á√ïES AUXILIARES ---
def calcular_tempo(inicio, fim):
    if not inicio or not fim or str(inicio).strip() == '' or str(fim).strip() == '':
        return ""
    try:
        inicio_dt = pd.to_datetime(inicio, errors='coerce')
        fim_dt = pd.to_datetime(fim, errors='coerce')

        if pd.isna(inicio_dt) or pd.isna(fim_dt):
            return ""

        diff = fim_dt - inicio_dt
        if diff.total_seconds() < 0: return "Inv√°lido"
        horas = int(diff.total_seconds() // 3600)
        minutos = int((diff.total_seconds() % 3600) // 60)
        return f"{horas:02d}:{minutos:02d}"
    except: return ""

def obter_status(registro):
    for campo in reversed(campos_tempo):
        valor = registro.get(campo)
        if valor and str(valor).strip() != '': return campo
    return "N√£o iniciado"

def botao_voltar():
    if st.button("‚¨ÖÔ∏è Voltar ao Menu Principal"):
        st.session_state.pagina_atual = "Tela Inicial"
        for key in list(st.session_state.keys()):
            if key not in ['pagina_atual']:
                del st.session_state[key]
        st.rerun()

# --- CONEX√ÉO INICIAL ---
worksheet = connect_to_google_sheets()

# --- LAYOUT PRINCIPAL ---
st.markdown("<div class='main-header'>üöö Suzano - Controle de Transfer√™ncia de Carga</div>", unsafe_allow_html=True)

# =============================================================================
# TELA INICIAL
# =============================================================================
if st.session_state.pagina_atual == "Tela Inicial":
    st.markdown("<div class='section-header'>MENU DE A√á√ïES</div>", unsafe_allow_html=True)
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üÜï NOVO REGISTRO", use_container_width=True):
            st.session_state.pagina_atual = "Novo"
            st.rerun()
        if st.button("üìä EM OPERA√á√ÉO", use_container_width=True):
            st.session_state.pagina_atual = "Em Opera√ß√£o"
            st.rerun()
    with col2:
        if st.button("‚úèÔ∏è EDITAR REGISTRO", use_container_width=True):
            st.session_state.pagina_atual = "Editar"
            st.rerun()
        if st.button("‚úÖ FINALIZADAS", use_container_width=True):
            st.session_state.pagina_atual = "Finalizadas"
            st.rerun()

    df = carregar_dataframe(worksheet)

    st.markdown("<div class='section-header'>SITUA√á√ÉO ATUAL</div>", unsafe_allow_html=True)
    if df.empty:
        st.info("Nenhum registro encontrado para exibir as m√©tricas.")
    else:
        em_operacao_df = df[df["Sa√≠da CD"] == ''].copy()
        total_em_operacao = len(em_operacao_df)
        na_fabrica = len(em_operacao_df[em_operacao_df["Sa√≠da do p√°tio"] == ''])
        no_cd_ou_rota = total_em_operacao - na_fabrica

        m1, m2, m3 = st.columns(3)
        m1.metric(label="üöõ Em Opera√ß√£o (Total)", value=total_em_operacao)
        m2.metric(label="üè≠ Na F√°brica", value=na_fabrica)
        m3.metric(label="üì¶ Em Rota / No CD", value=no_cd_ou_rota)

        with st.expander("Ver Detalhes dos Ve√≠culos em Opera√ß√£o"):
            if em_operacao_df.empty:
                st.write("Nenhum ve√≠culo em opera√ß√£o no momento.")
            else:
                for _, row in em_operacao_df.iterrows():
                    status = obter_status(row)
                    st.info(f"**Placa:** {row['Placa do caminh√£o']} | **Status Atual:** {status}")

    st.markdown("<div class='section-header'>üìà INDICADORES DE PERFORMANCE (HOJE)</div>", unsafe_allow_html=True)
    if df.empty:
        st.info("Nenhum registro hoje para calcular as m√©dias.")
    else:
        # <<< CORRE√á√ÉO 2: Comparar a data como string.
        hoje_str = datetime.now(FUSO_HORARIO).strftime('%Y-%m-%d')
        df_hoje = df[df['Data'] == hoje_str].copy()

        if df_hoje.empty:
            st.info("Nenhum registro encontrado com a data de hoje.")
        else:
            def hhmm_para_minutos(tempo_str):
                if not tempo_str or ':' not in str(tempo_str): return np.nan
                try:
                    h, m = map(int, str(tempo_str).split(':'))
                    return h * 60 + m
                except: return np.nan

            def calcular_media_tempo(series):
                minutos = series.apply(hhmm_para_minutos).mean()
                if pd.isna(minutos): return "N/D"
                horas_media = int(minutos // 60)
                minutos_media = int(minutos % 60)
                return f"{horas_media:02d}:{minutos_media:02d}"

            col_fabrica, col_cd = st.columns(2)
            with col_fabrica:
                st.subheader("M√©tricas da F√°brica")
                st.metric(label="Tempo M√©dio Esperando Doca", value=calcular_media_tempo(df_hoje['Tempo Espera Doca']))
                st.metric(label="Tempo M√©dio de Carregamento", value=calcular_media_tempo(df_hoje['Tempo de Carregamento']))
                st.metric(label="Tempo M√©dio Total na F√°brica", value=calcular_media_tempo(df_hoje['Tempo Total']))
            with col_cd:
                st.subheader("M√©tricas do CD")
                st.metric(label="Tempo M√©dio de Percurso", value=calcular_media_tempo(df_hoje['Tempo Percurso Para CD']))
                st.metric(label="Tempo M√©dio Esperando Doca (CD)", value=calcular_media_tempo(df_hoje['Tempo Espera Doca CD']))
                st.metric(label="Tempo M√©dio de Descarregamento", value=calcular_media_tempo(df_hoje['Tempo de Descarregamento CD']))
                st.metric(label="Tempo M√©dio Total no CD", value=calcular_media_tempo(df_hoje['Tempo Total CD']))

# =============================================================================
# P√ÅGINA DE NOVO REGISTRO
# =============================================================================
elif st.session_state.pagina_atual == "Novo":
    botao_voltar()
    st.markdown("### üÜï Novo Registro de Transfer√™ncia")

    if 'novo_registro_dict' not in st.session_state:
        st.session_state.novo_registro_dict = {}

    def registrar_agora_novo(campo):
        st.session_state.novo_registro_dict[campo] = datetime.now(FUSO_HORARIO).strftime("%Y-%m-%d %H:%M:%S")

    def salvar_novo_registro():
        placa = st.session_state.novo_registro_dict.get("Placa do caminh√£o")
        conferente = st.session_state.novo_registro_dict.get("Nome do conferente")

        if not placa or not conferente:
            st.session_state.notification = ("error", "Placa e Conferente s√£o obrigat√≥rios para salvar.")
            return

        with st.spinner("Salvando no Google Sheets..."):
            st.session_state.novo_registro_dict['Data'] = datetime.now(FUSO_HORARIO).strftime('%Y-%m-%d')

            for campo in campos_calculados:
                st.session_state.novo_registro_dict[campo] = ""

            st.session_state.novo_registro_dict['Tempo Espera Doca'] = calcular_tempo(st.session_state.novo_registro_dict.get("Entrada na F√°brica"), st.session_state.novo_registro_dict.get("Encostou na doca F√°brica"))
            st.session_state.novo_registro_dict['Tempo de Carregamento'] = calcular_tempo(st.session_state.novo_registro_dict.get("In√≠cio carregamento"), st.session_state.novo_registro_dict.get("Fim carregamento"))
            st.session_state.novo_registro_dict['Tempo Total'] = calcular_tempo(st.session_state.novo_registro_dict.get("Entrada na F√°brica"), st.session_state.novo_registro_dict.get("Sa√≠da do p√°tio"))
            st.session_state.novo_registro_dict['Tempo Percurso Para CD'] = calcular_tempo(st.session_state.novo_registro_dict.get("Sa√≠da do p√°tio"), st.session_state.novo_registro_dict.get("Entrada CD"))
            st.session_state.novo_registro_dict['Tempo Espera Doca CD'] = calcular_tempo(st.session_state.novo_registro_dict.get("Entrada CD"), st.session_state.novo_registro_dict.get("Encostou na doca CD"))
            st.session_state.novo_registro_dict['Tempo de Descarregamento CD'] = calcular_tempo(st.session_state.novo_registro_dict.get("In√≠cio Descarregamento CD"), st.session_state.novo_registro_dict.get("Fim Descarregamento CD"))
            st.session_state.novo_registro_dict['Tempo Total CD'] = calcular_tempo(st.session_state.novo_registro_dict.get("Entrada CD"), st.session_state.novo_registro_dict.get("Sa√≠da CD"))

            nova_linha_lista = [st.session_state.novo_registro_dict.get(col, '') for col in COLUNAS_ESPERADAS]

            try:
                worksheet.append_row(nova_linha_lista, value_input_option='USER_ENTERED')
                st.cache_data.clear()
                st.session_state.notification = ("success", "Novo registro salvo com sucesso!")
                del st.session_state.novo_registro_dict
            except Exception as e:
                st.session_state.notification = ("error", f"Falha ao salvar: {e}")

    placa = st.text_input("üöõ Placa do Caminh√£o", value=st.session_state.novo_registro_dict.get("Placa do caminh√£o", ""), key="placa_novo")
    conferente = st.text_input("üë§ Nome do Conferente", value=st.session_state.novo_registro_dict.get("Nome do conferente", ""), key="conferente_novo")
    st.session_state.novo_registro_dict["Placa do caminh√£o"] = placa
    st.session_state.novo_registro_dict["Nome do conferente"] = conferente
    st.markdown("---")

    for campo in campos_tempo:
        if st.session_state.novo_registro_dict.get(campo):
            st.success(f"‚úÖ {campo}: {st.session_state.novo_registro_dict[campo]}")
        else:
            st.button(f"Registrar {campo}", key=f"btn_novo_{campo}", on_click=registrar_agora_novo, args=(campo,))

    st.markdown("---")

    col_btn, col_msg = st.columns([1, 2])
    with col_btn:
        st.button("üíæ SALVAR NOVO REGISTRO", on_click=salvar_novo_registro, use_container_width=True, type="primary")
    with col_msg:
        if st.session_state.get("notification"):
            msg_type, msg_text = st.session_state.notification
            if msg_type == "success": st.success(msg_text)
            else: st.error(msg_text)
            del st.session_state.notification

# =============================================================================
# P√ÅGINA DE EDI√á√ÉO
# =============================================================================
elif st.session_state.pagina_atual == "Editar":
    botao_voltar()
    st.markdown("### ‚úèÔ∏è Editar Registros Incompletos")

    df = carregar_dataframe(worksheet)
    incompletos = df[df["Sa√≠da CD"] == ''].copy()

    if incompletos.empty:
        st.success("üéâ Todos os registros est√£o completos!")
        st.stop()

    opcoes = {f"üöõ {row['Placa do caminh√£o']} | üìÖ {row['Data']}": idx for idx, row in incompletos.iterrows()}

    def carregar_registro_para_edicao():
        selecao_atual = st.session_state.selectbox_edicao
        if selecao_atual != "Selecione...":
            df_index_filtrado = opcoes[selecao_atual]
            df_index_real = incompletos.loc[df_index_filtrado, 'df_index']
            st.session_state.registro_em_edicao = df.loc[df_index_real].to_dict()
        else:
            if 'registro_em_edicao' in st.session_state:
                del st.session_state.registro_em_edicao

    selecao_label = st.selectbox(
        "Selecione um registro para editar:",
        options=["Selecione..."] + list(opcoes.keys()),
        key="selectbox_edicao",
        on_change=carregar_registro_para_edicao
    )

    if 'registro_em_edicao' in st.session_state:
        reg = st.session_state.registro_em_edicao
        st.markdown(f"#### Editando Placa: **{reg['Placa do caminh√£o']}**")

        def registrar_agora_edit(campo_a_registrar):
            st.session_state.registro_em_edicao[campo_a_registrar] = datetime.now(FUSO_HORARIO).strftime("%Y-%m-%d %H:%M:%S")

        def salvar_alteracoes():
            with st.spinner("Salvando no Google Sheets..."):
                registro_para_salvar = st.session_state.registro_em_edicao

                # A convers√£o de data n√£o √© mais necess√°ria aqui, pois ela j√° √© uma string.

                if registro_para_salvar.get("Entrada na F√°brica") and registro_para_salvar.get("Encostou na doca F√°brica"):
                    registro_para_salvar['Tempo Espera Doca'] = calcular_tempo(registro_para_salvar.get("Entrada na F√°brica"), registro_para_salvar.get("Encostou na doca F√°brica"))
                if registro_para_salvar.get("In√≠cio carregamento") and registro_para_salvar.get("Fim carregamento"):
                    registro_para_salvar['Tempo de Carregamento'] = calcular_tempo(registro_para_salvar.get("In√≠cio carregamento"), registro_para_salvar.get("Fim carregamento"))
                if registro_para_salvar.get("Entrada na F√°brica") and registro_para_salvar.get("Sa√≠da do p√°tio"):
                    registro_para_salvar['Tempo Total'] = calcular_tempo(registro_para_salvar.get("Entrada na F√°brica"), registro_para_salvar.get("Sa√≠da do p√°tio"))
                if registro_para_salvar.get("Sa√≠da do p√°tio") and registro_para_salvar.get("Entrada CD"):
                    registro_para_salvar['Tempo Percurso Para CD'] = calcular_tempo(registro_para_salvar.get("Sa√≠da do p√°tio"), registro_para_salvar.get("Entrada CD"))
                if registro_para_salvar.get("Entrada CD") and registro_para_salvar.get("Encostou na doca CD"):
                    registro_para_salvar['Tempo Espera Doca CD'] = calcular_tempo(registro_para_salvar.get("Entrada CD"), registro_para_salvar.get("Encostou na doca CD"))
                if registro_para_salvar.get("In√≠cio Descarregamento CD") and registro_para_salvar.get("Fim Descarregamento CD"):
                    registro_para_salvar['Tempo de Descarregamento CD'] = calcular_tempo(registro_para_salvar.get("In√≠cio Descarregamento CD"), registro_para_salvar.get("Fim Descarregamento CD"))
                if registro_para_salvar.get("Entrada CD") and registro_para_salvar.get("Sa√≠da CD"):
                    registro_para_salvar['Tempo Total CD'] = calcular_tempo(registro_para_salvar.get("Entrada CD"), registro_para_salvar.get("Sa√≠da CD"))

                try:
                    gsheet_row_index = reg['df_index'] + 2
                    valores_para_salvar = [registro_para_salvar.get(col) if registro_para_salvar.get(col, '') else None for col in COLUNAS_ESPERADAS]

                    worksheet.update(f'A{gsheet_row_index}', [valores_para_salvar], value_input_option='USER_ENTERED')
                    st.cache_data.clear()
                    st.session_state.notification = ("success", "Registro atualizado com sucesso!")
                    del st.session_state.registro_em_edicao
                    st.session_state.selectbox_edicao = "Selecione..."
                    st.rerun()
                except Exception as e:
                    st.session_state.notification = ("error", f"Falha ao salvar: {e}")

        for campo in campos_tempo:
            valor_atual = reg.get(campo, '')
            if isinstance(valor_atual, str) and valor_atual.strip():
                st.success(f"‚úÖ {campo}: {valor_atual}")
            else:
                col1, col2 = st.columns([3, 1])
                with col1:
                    st.text_input(f"üìã {campo}", value="Pendente...", disabled=True, key=f"placeholder_{campo}")
                with col2:
                    st.button(
                        "‚è∞ Agora",
                        key=f"btn_now_edit_{campo}",
                        on_click=registrar_agora_edit,
                        args=(campo,),
                        use_container_width=True
                    )

        st.markdown("---")

        col_btn_edit, col_msg_edit = st.columns([1, 2])
        with col_btn_edit:
            st.button("üíæ SALVAR ALTERA√á√ïES", on_click=salvar_alteracoes, use_container_width=True, type="primary")
        with col_msg_edit:
            if st.session_state.get("notification"):
                msg_type, msg_text = st.session_state.notification
                if msg_type == "success": st.success(msg_text)
                else: st.error(msg_text)
                del st.session_state.notification

# =============================================================================
# OUTRAS P√ÅGINAS
# =============================================================================
elif st.session_state.pagina_atual in ["Em Opera√ß√£o", "Finalizadas"]:
    botao_voltar()
    df = carregar_dataframe(worksheet)

    if st.session_state.pagina_atual == "Em Opera√ß√£o":
        st.markdown("### üìä Registros em Opera√ß√£o")
        subset_df = df[df["Sa√≠da CD"] == ''].copy()
        st.dataframe(subset_df)

    elif st.session_state.pagina_atual == "Finalizadas":
        st.markdown("### ‚úÖ Registros Finalizados")
        subset_df = df[df["Sa√≠da CD"] != ''].copy()
        st.dataframe(subset_df)
